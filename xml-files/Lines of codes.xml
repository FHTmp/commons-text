<METRICS profile="Lines of code metrics (2)" timestamp="Fri, 9 Aug 2024 10:58:03 NZST">
	<METRIC category="Method" name="Javadoc lines of code" abbreviation="JLOC">
		<VALUE measured="isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="18.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="17.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="97.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="49.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="75.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="92.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="60.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="70.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="37.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="36.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="39.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="35.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="45.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="0.0"/>
		<VALUE measured="test(int)" value="0.0"/>
		<VALUE measured="toString()" value="0.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="0.0"/>
	</METRIC>
	<METRIC category="Method" name="Lines of code" abbreviation="LOC">
		<VALUE measured="isMatch(char[], int, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="49.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="92.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="26.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="41.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="60.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="18.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="74.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="43.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="41.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="37.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="40.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="40.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="61.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="37.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="49.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="49.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="49.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="51.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="51.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="99.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="76.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="39.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="44.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="52.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="38.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="149.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="63.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="47.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="84.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="41.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="100.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="148.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="66.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="38.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="47.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="90.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="42.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="38.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="35.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="99.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="52.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="47.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="36.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="39.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="40.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="44.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="69.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="56.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="49.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="20.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="52.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="52.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="52.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="81.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="182.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="78.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="42.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="81.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="41.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="40.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="142.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="40.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="36.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="38.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="63.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="37.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="73.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="40.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="39.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="42.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="36.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="48.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="40.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="47.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="57.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="49.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="63.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="41.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="42.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="63.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="49.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="62.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="87.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="166.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="105.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="53.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="198.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="163.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="79.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="53.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="46.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="47.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="52.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="56.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="41.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="6.0"/>
		<VALUE measured="test(int)" value="5.0"/>
		<VALUE measured="toString()" value="4.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="4.0"/>
	</METRIC>
	<METRIC category="Method" name="Non-comment lines of code" abbreviation="NCLOC">
		<VALUE measured="isMatch(char[], int, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="70.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="11.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicate.test(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="66.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="37.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormatFactory.getFormat(String, String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="99.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="71.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="50.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="125.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="54.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="48.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="121.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="57.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="28.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="33.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="48.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextRandomProvider.nextInt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="27.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="99.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="52.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="66.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="40.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="34.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="35.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="58.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="40.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="44.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="12.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="85.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="78.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="57.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="13.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsHandler.handleReplacement(int, List&lt;T&gt;, List&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="33.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="55.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="37.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="105.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="29.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="25.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="27.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="31.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="23.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="45.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="43.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="31.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="28.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="39.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="34.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="32.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="26.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="22.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="30.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="24.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="21.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="55.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="55.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="71.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="71.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="52.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="53.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="198.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="64.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="42.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="42.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="32.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="41.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScore.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="18.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="50.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="20.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="41.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translateWhole(CharSequence, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="6.0"/>
		<VALUE measured="test(int)" value="5.0"/>
		<VALUE measured="toString()" value="4.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="3.0"/>
	</METRIC>
	<METRIC category="Method" name="Relative lines of code" abbreviation="RLOC">
		<VALUE measured="isMatch(char[], int, int, int)" value="0.8333333333333334"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="0.11951219512195121"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="0.03170731707317073"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="0.22439024390243903"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="0.06341463414634146"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="0.046341463414634146"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="0.1"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="0.07317073170731707"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="0.03902439024390244"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="0.024390243902439025"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="0.024390243902439025"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="0.014634146341463415"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="0.02926829268292683"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="0.027906976744186046"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="0.12093023255813953"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="0.027906976744186046"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="0.046511627906976744"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="0.037209302325581395"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="0.04186046511627907"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="0.04186046511627907"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="0.03255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="0.023255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="0.023255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="0.05581395348837209"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="0.027906976744186046"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="0.04186046511627907"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="0.05116279069767442"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="0.05581395348837209"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="0.023255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="0.023255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="0.023255813953488372"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="0.04186046511627907"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="0.037209302325581395"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="0.037209302325581395"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="0.05581395348837209"/>
		<VALUE measured="org.apache.commons.text.Builder.build()" value="0.0821917808219178"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="0.10101010101010101"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="0.6060606060606061"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="0.18181818181818182"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="0.20454545454545456"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="0.6818181818181818"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicate.test(int)" value="0.5555555555555556"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="0.11688311688311688"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="0.19480519480519481"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="0.15584415584415584"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="0.12987012987012986"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="0.12987012987012986"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="0.1038961038961039"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="0.1038961038961039"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="0.13095238095238096"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="0.11904761904761904"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="0.7021276595744681"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="0.19148936170212766"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="0.017786561264822136"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="0.019762845849802372"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="0.03557312252964427"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="0.021739130434782608"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="0.06719367588932806"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="0.14624505928853754"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="0.021739130434782608"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="0.05138339920948617"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="0.043478260869565216"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="0.017786561264822136"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="0.017786561264822136"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="0.08498023715415019"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="0.019762845849802372"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="0.07114624505928854"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="0.08102766798418973"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="0.02766798418972332"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="0.023715415019762844"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="0.025691699604743084"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="0.021739130434782608"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="0.021739130434782608"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="0.01383399209486166"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="0.4"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="0.06053811659192825"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="0.03139013452914798"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="0.020179372197309416"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="0.03139013452914798"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="0.011210762331838564"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="0.03811659192825112"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="0.04932735426008968"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="0.02914798206278027"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="0.02466367713004484"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="0.02242152466367713"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="0.020179372197309416"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="0.08295964125560538"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="0.03139013452914798"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="0.020179372197309416"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="0.08968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="0.03139013452914798"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="0.008968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="0.008968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="0.008968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="0.008968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="0.008968609865470852"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="0.0515695067264574"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="0.01569506726457399"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="0.01569506726457399"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="0.01569506726457399"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="0.01569506726457399"/>
		<VALUE measured="org.apache.commons.text.FormatFactory.getFormat(String, String, Locale)" value="0.5789473684210527"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="0.07936507936507936"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="0.12698412698412698"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="0.15079365079365079"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="0.12698412698412698"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="0.31746031746031744"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="0.07936507936507936"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="0.3"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="0.4"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="0.02608695652173913"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="0.12173913043478261"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="0.034782608695652174"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="0.11304347826086956"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="0.034782608695652174"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="0.06086956521739131"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="0.034782608695652174"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="0.043478260869565216"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="0.04932735426008968"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="0.1210762331838565"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="0.04932735426008968"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="0.10762331838565023"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="0.14798206278026907"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="0.14349775784753363"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="0.1210762331838565"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="0.05275779376498801"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="0.02158273381294964"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="0.14628297362110312"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="0.047961630695443645"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="0.03357314148681055"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="0.03836930455635491"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="0.011029411764705883"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="0.03308823529411765"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="0.025735294117647058"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="0.025735294117647058"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="0.03676470588235294"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="0.025735294117647058"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="0.0625"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="0.07352941176470588"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="0.051470588235294115"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="0.051470588235294115"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="0.03676470588235294"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="0.03308823529411765"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="0.0661764705882353"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="0.08823529411764706"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="0.025735294117647058"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="0.03308823529411765"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="0.08823529411764706"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="0.05514705882352941"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="0.01838235294117647"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="0.002181818181818182"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="0.24358974358974358"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="0.2962962962962963"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="0.0076363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="0.010545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="0.00909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="0.008363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="0.007272727272727273"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="0.01090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="0.01090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="0.0076363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="0.008363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="0.012363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="0.009818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="0.00909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="0.006545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="0.008727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="0.007272727272727273"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="0.012727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="0.008363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="0.0061818181818181816"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="0.010181818181818183"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="0.00909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="0.008727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="0.008727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="0.013454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="0.007272727272727273"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="0.00909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="0.01090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="0.010545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="0.008727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="0.0032727272727272726"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="0.008727272727272728"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="0.013818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="0.0061818181818181816"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="0.005090909090909091"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="0.006545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="0.006545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="0.012363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="0.0076363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="0.006545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="0.006909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="0.0061818181818181816"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="0.008363636363636363"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="0.0047272727272727275"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="0.009818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="0.005818181818181818"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="0.0036363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="0.005454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="0.006545454545454545"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="0.004363636363636364"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="0.002909090909090909"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="0.009454545454545455"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="0.004"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="0.007272727272727273"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="0.013309671694764862"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="0.01064773735581189"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.01064773735581189"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.026619343389529725"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.023070097604259095"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.026619343389529725"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.023070097604259095"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="0.007985803016858917"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="0.01419698314108252"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="0.008873114463176575"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.01064773735581189"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="0.008873114463176575"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.011535048802129548"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.01064773735581189"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="0.019520851818988466"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.008873114463176575"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.015971606033717833"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.015971606033717833"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.015971606033717833"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="0.008873114463176575"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="0.009760425909494233"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="0.043478260869565216"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="0.01685891748003549"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="0.01774622892635315"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.01064773735581189"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="0.011535048802129548"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="0.043478260869565216"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="0.011535048802129548"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.011535048802129548"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="0.043478260869565216"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.011535048802129548"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="0.04525288376220053"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="0.04525288376220053"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="0.007985803016858917"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="0.008873114463176575"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.013309671694764862"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.018633540372670808"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="0.0878438331854481"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="0.023070097604259095"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="0.006211180124223602"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="0.3"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="0.4"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="0.012322858903265557"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="0.012322858903265557"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.005545286506469501"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.005545286506469501"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="0.0061614294516327784"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="0.0030807147258163892"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="0.04682686383240912"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="0.02033271719038817"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="0.015403573629081947"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="0.04066543438077634"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="0.008009858287122612"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="0.021565003080714726"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="0.008009858287122612"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="0.005545286506469501"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="0.00862600123228589"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="0.013555144793592114"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="0.0024645717806531116"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="0.00862600123228589"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="0.013555144793592114"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="0.009858287122612447"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="0.012322858903265557"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="0.011090573012939002"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="0.013555144793592114"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="0.021565003080714726"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="0.008009858287122612"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="0.008009858287122612"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="0.020948860135551448"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="0.009858287122612447"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="0.01725200246457178"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="0.0061614294516327784"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="0.010474430067775724"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="0.005545286506469501"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="0.024029574861367836"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="0.009858287122612447"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="0.01725200246457178"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="0.0061614294516327784"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="0.0061614294516327784"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="0.005545286506469501"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="0.019716574245224893"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="0.016019716574245224"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="0.00862600123228589"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="0.017868145409735057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="0.016019716574245224"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="0.00862600123228589"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="0.014787430683918669"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="0.027110289587184228"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="0.009858287122612447"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="0.011090573012939002"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="0.03203943314849045"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="0.02341343191620456"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="0.004929143561306223"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="0.010474430067775724"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="0.0061614294516327784"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="0.006777572396796057"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="0.0073937153419593345"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="0.01170671595810228"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="0.0030807147258163892"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="0.004313000616142945"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="0.009242144177449169"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="0.0036968576709796672"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="0.23529411764705882"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="0.38235294117647056"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="0.3076923076923077"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="0.2692307692307692"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="0.24"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="0.56"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="0.08235294117647059"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="0.08235294117647059"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="0.08235294117647059"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="0.11956521739130435"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="0.07608695652173914"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="0.06521739130434782"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="0.07608695652173914"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="0.07608695652173914"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="0.21739130434782608"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="0.18478260869565216"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="0.2857142857142857"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="0.4642857142857143"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="0.3103448275862069"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="0.4482758620689655"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="0.21739130434782608"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="0.5652173913043478"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="0.013192612137203167"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="0.1951219512195122"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="0.5365853658536586"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="0.21739130434782608"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="0.5652173913043478"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="0.023746701846965697"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="0.0395778364116095"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="0.0395778364116095"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="0.06596306068601583"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int, int, int)" value="0.079155672823219"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="0.023746701846965697"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="0.0316622691292876"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="0.021108179419525065"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="0.01764705882352941"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="0.01764705882352941"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="0.01764705882352941"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="0.058823529411764705"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="0.07647058823529412"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="0.07647058823529412"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="0.041176470588235294"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="0.058823529411764705"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="0.10588235294117647"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="0.08235294117647059"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="0.07058823529411765"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="0.047058823529411764"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="0.08235294117647059"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="0.00855431993156544"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="0.010265183917878529"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="0.01283147989734816"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="0.006843455945252352"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="0.016253207869974338"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="0.01454234388366125"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="0.015397775876817793"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="0.01454234388366125"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="0.006843455945252352"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="0.013686911890504704"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="0.011120615911035072"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="0.006843455945252352"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="0.011120615911035072"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="0.020530367835757058"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="0.006843455945252352"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="0.007698887938408896"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="0.018819503849443968"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="0.013686911890504704"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="0.010265183917878529"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="0.016253207869974338"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="0.01283147989734816"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="0.013686911890504704"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="0.018819503849443968"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="0.01454234388366125"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="0.019674935842600515"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="0.013686911890504704"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="0.018819503849443968"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="0.013686911890504704"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="0.018819503849443968"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="0.011120615911035072"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="0.016253207869974338"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="0.0213857998289136"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="0.0213857998289136"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="0.00855431993156544"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="0.02480752780153978"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="0.00855431993156544"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="0.010265183917878529"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="0.00855431993156544"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="0.018819503849443968"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="0.016253207869974338"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="0.01283147989734816"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="0.01454234388366125"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="0.006843455945252352"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="0.01283147989734816"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="0.01454234388366125"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="0.016253207869974338"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="0.12745936698032506"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="0.033973412112259974"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="0.0930576070901034"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="0.005908419497784343"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="0.008862629246676515"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="0.005908419497784343"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="0.01772525849335303"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="0.03249630723781388"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="0.03840472673559823"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="0.0206794682422452"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="0.033973412112259974"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="0.033973412112259974"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="0.03249630723781388"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="0.014771048744460856"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.008862629246676515"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.01624815361890694"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="0.03249630723781388"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="0.023633677991137372"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="0.028064992614475627"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="0.011816838995568686"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="0.025110782865583457"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.0103397341211226"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.005908419497784343"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="0.013293943870014771"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="0.013293943870014771"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="0.033973412112259974"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="0.03249630723781388"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="0.013293943870014771"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="0.013293943870014771"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="0.013293943870014771"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="0.022156573116691284"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="0.01624815361890694"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="0.01772525849335303"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="0.016966067864271458"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="0.014970059880239521"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="0.014970059880239521"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="0.015968063872255488"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="0.013972055888223553"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="0.013972055888223553"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="0.010978043912175649"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="0.010978043912175649"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="0.022954091816367265"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="0.010978043912175649"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="0.046906187624750496"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="0.08383233532934131"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="0.016966067864271458"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="0.016966067864271458"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="0.016966067864271458"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="0.010978043912175649"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="0.010978043912175649"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="0.015968063872255488"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="0.012974051896207584"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="0.015968063872255488"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="0.015968063872255488"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="0.04091816367265469"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="0.005333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="0.02266666666666667"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="0.03333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="0.021333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="0.009333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="0.005333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="0.006666666666666667"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="0.005333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="0.02266666666666667"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="0.018666666666666668"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="0.02"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="0.016"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="0.010666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="0.029333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="0.012"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="0.017333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="0.013333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.008"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="0.009333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="0.009333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="0.006666666666666667"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="0.006666666666666667"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="0.009333333333333334"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="0.014666666666666666"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="0.018666666666666668"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="0.032"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="0.14516129032258066"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="0.16129032258064516"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="0.16129032258064516"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="0.14516129032258066"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="0.015523932729624839"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="0.7272727272727273"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="0.01034928848641656"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="0.028460543337645538"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="0.042690815006468305"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="0.014230271668822769"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="0.03622250970245795"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="0.029754204398447608"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="0.03363518758085381"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="0.0258732212160414"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="0.03880983182406209"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="0.03622250970245795"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="0.029754204398447608"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="0.018111254851228976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="0.014230271668822769"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="0.02328589909443726"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="0.015523932729624839"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="0.018111254851228976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="0.0129366106080207"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="0.02457956015523933"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="0.00597609561752988"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="0.01593625498007968"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="0.00597609561752988"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="0.0199203187250996"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="0.0099601593625498"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="0.0099601593625498"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="0.0099601593625498"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="0.017928286852589643"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="0.01195219123505976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="0.021912350597609563"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="0.021912350597609563"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="0.045816733067729085"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="0.02390438247011952"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="0.03386454183266932"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="0.03386454183266932"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="0.037848605577689244"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="0.01195219123505976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="0.01195219123505976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="0.06772908366533864"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="0.02390438247011952"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="0.04780876494023904"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="0.013944223107569721"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="0.021912350597609563"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="0.02390438247011952"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="0.00796812749003984"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="0.029880478087649404"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="0.0199203187250996"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="0.017928286852589643"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="0.02390438247011952"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="0.02390438247011952"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="0.01593625498007968"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="0.027888446215139442"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="0.049800796812749"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="0.049800796812749"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="0.061752988047808766"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="0.01593625498007968"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="0.01195219123505976"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="0.00796812749003984"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="0.021912350597609563"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="0.01593625498007968"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="0.004106776180698152"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="0.006844626967830253"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="0.008213552361396304"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="0.009582477754962354"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="0.01026694045174538"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="0.01163586584531143"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="0.012320328542094456"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="0.012320328542094456"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="0.01163586584531143"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="0.01163586584531143"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="0.06844626967830253"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="0.01026694045174538"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="0.008213552361396304"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="0.008213552361396304"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="0.01642710472279261"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="0.0054757015742642025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="0.009582477754962354"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="0.015058179329226557"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="0.008213552361396304"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="0.01163586584531143"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="0.012320328542094456"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="0.019164955509924708"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="0.015058179329226557"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="0.015058179329226557"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="0.01779603011635866"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="0.017111567419575632"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="0.017111567419575632"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="0.009582477754962354"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="0.013689253935660506"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="0.007529089664613279"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="0.01779603011635866"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="0.006844626967830253"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="0.008213552361396304"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="0.006844626967830253"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="0.007529089664613279"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="0.014373716632443531"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="0.012320328542094456"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="0.01026694045174538"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="0.006844626967830253"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="0.01026694045174538"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="0.00889801505817933"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="0.010951403148528405"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="0.013004791238877482"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="0.10130047912388775"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="0.02190280629705681"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="0.004232804232804233"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="0.0031746031746031746"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="0.004232804232804233"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="0.02433862433862434"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="0.06984126984126984"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="0.015873015873015872"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="0.004232804232804233"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="0.006349206349206349"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="0.026455026455026454"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="0.013756613756613757"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="0.02328042328042328"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="0.026455026455026454"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="0.03492063492063492"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.01164021164021164"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="0.01904761904761905"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="0.014814814814814815"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="0.01904761904761905"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="0.01798941798941799"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.004232804232804233"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="0.020105820105820106"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="0.009523809523809525"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="0.01164021164021164"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="0.01164021164021164"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="0.04021164021164021"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="0.013756613756613757"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="0.007407407407407408"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="0.008465608465608466"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="0.02328042328042328"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="0.010582010582010581"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="0.009523809523809525"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="0.009523809523809525"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="0.014814814814814815"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="0.014814814814814815"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="0.01164021164021164"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="0.012698412698412698"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="0.01951219512195122"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="0.07804878048780488"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="0.01951219512195122"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="0.01951219512195122"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="0.08292682926829269"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="0.01951219512195122"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="0.14634146341463414"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="0.04390243902439024"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="0.03902439024390244"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="0.04390243902439024"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="0.03902439024390244"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="0.03902439024390244"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="0.03414634146341464"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="0.024390243902439025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="0.024390243902439025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="0.02926829268292683"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="0.024390243902439025"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="0.05853658536585366"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="0.02926829268292683"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="0.03902439024390244"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="0.018682399213372666"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="0.01376597836774828"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="0.01671583087512291"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="0.007866273352999017"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="0.007866273352999017"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="0.007866273352999017"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="0.007866273352999017"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="0.007866273352999017"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="0.02359882005899705"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="0.01376597836774828"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="0.046214355948869225"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="0.08849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="0.01376597836774828"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="0.00983284169124877"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="0.010816125860373648"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="0.015732546705998034"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="0.012782694198623401"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="0.015732546705998034"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="0.014749262536873156"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="0.008849557522123894"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="0.011799410029498525"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="0.04129793510324484"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="0.00522875816993464"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="0.022222222222222223"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="0.032679738562091505"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="0.02091503267973856"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="0.009150326797385621"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="0.01568627450980392"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="0.00522875816993464"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="0.006535947712418301"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="0.00522875816993464"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="0.00784313725490196"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="0.022222222222222223"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="0.018300653594771243"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="0.0196078431372549"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="0.0196078431372549"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="0.0196078431372549"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="0.011764705882352941"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="0.01045751633986928"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="0.02875816993464052"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="0.026143790849673203"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.00784313725490196"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="0.01699346405228758"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="0.013071895424836602"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.009150326797385621"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="0.009150326797385621"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="0.009150326797385621"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="0.006535947712418301"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="0.006535947712418301"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="0.009150326797385621"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="0.01437908496732026"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="0.018300653594771243"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="0.03137254901960784"/>
		<VALUE measured="org.apache.commons.text.TextRandomProvider.nextInt(int)" value="0.23333333333333334"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="0.001996007984031936"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="0.24358974358974358"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="0.0641025641025641"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="0.2962962962962963"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="0.009647371922821025"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="0.008649367930805056"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="0.008649367930805056"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="0.008649367930805056"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="0.010312707917498337"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="0.010312707917498337"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="0.011310711909514305"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="0.009314703925482368"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="0.008649367930805056"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="0.009314703925482368"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="0.00665335994677312"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="0.007318695941450432"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="0.012641383898868928"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="0.007651363938789089"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="0.005655355954757153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="0.007984031936127744"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="0.005655355954757153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="0.007318695941450432"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="0.009314703925482368"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="0.00665335994677312"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="0.001996007984031936"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="0.007318695941450432"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="0.012641383898868928"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="0.00665335994677312"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="0.007318695941450432"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="0.009647371922821025"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="0.011310711909514305"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="0.009647371922821025"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="0.0083166999334664"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="0.00998003992015968"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="0.0029940119760479044"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="0.00665335994677312"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="0.005655355954757153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="0.011643379906852961"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="0.007318695941450432"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="0.005988023952095809"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="0.006320691949434464"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="0.00499001996007984"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="0.006986027944111776"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="0.008982035928143712"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="0.00332667997338656"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="0.0053226879574184965"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="0.003992015968063872"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="0.0026613439787092482"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="0.008649367930805056"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="0.003659347970725216"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="0.00665335994677312"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="0.004324683965402528"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="0.004657351962741184"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="0.01728110599078341"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="0.013824884792626729"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.013824884792626729"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.03456221198156682"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.029953917050691243"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.03456221198156682"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.029953917050691243"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="0.010368663594470046"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="0.018433179723502304"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="0.01152073732718894"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.024193548387096774"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.02304147465437788"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="0.01152073732718894"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.014976958525345621"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.013824884792626729"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="0.02534562211981567"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.01152073732718894"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.020737327188940093"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.020737327188940093"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.020737327188940093"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="0.01152073732718894"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="0.012672811059907835"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="0.02880184331797235"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="0.021889400921658985"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="0.02304147465437788"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.013824884792626729"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="0.014976958525345621"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.014976958525345621"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="0.027649769585253458"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.014976958525345621"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="0.03110599078341014"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="0.02880184331797235"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="0.014976958525345621"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="0.02880184331797235"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="0.010368663594470046"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="0.010368663594470046"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.010368663594470046"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="0.01152073732718894"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.01728110599078341"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="0.009216589861751152"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="0.11405529953917051"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="0.029953917050691243"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="0.008064516129032258"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="0.3"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="0.4"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="0.010830324909747292"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="0.010314595152140279"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="0.010314595152140279"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="0.005157297576070139"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="0.0025786487880350697"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="0.026817947395564725"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="0.0025786487880350697"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="0.01701908200103146"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="0.012893243940175348"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="0.03403816400206292"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="0.006704486848891181"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="0.018050541516245487"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="0.006704486848891181"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="0.011346054667354307"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="0.007220216606498195"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="0.0020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="0.011346054667354307"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="0.007220216606498195"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="0.024239298607529654"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="0.010314595152140279"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="0.018566271273852502"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="0.011346054667354307"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="0.010314595152140279"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="0.006704486848891181"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="0.012377514182568335"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="0.017534811758638472"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="0.01444043321299639"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="0.005157297576070139"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="0.008767405879319236"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="0.020113460546673543"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="0.01444043321299639"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="0.005157297576070139"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="0.005157297576070139"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="0.015471892728210418"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="0.010314595152140279"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="0.008767405879319236"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="0.03403816400206292"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="0.016503352243424446"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="0.013408973697782363"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="0.007220216606498195"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="0.014956162970603403"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="0.013408973697782363"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="0.007220216606498195"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="0.012377514182568335"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="0.020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="0.008251676121712223"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="0.009283135636926251"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="0.022692109334708613"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="0.01186178442496132"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="0.0041258380608561115"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="0.008767405879319236"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="0.005157297576070139"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="0.006188757091284167"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="0.009798865394533264"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="0.0025786487880350697"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="0.0036101083032490976"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="0.007735946364105209"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="0.010830324909747292"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="0.005673027333677153"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="0.0020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="0.0020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="0.0020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="0.0020629190304280558"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="0.0046415678184631255"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="0.0030943785456420837"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="0.011976047904191617"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="0.08263473053892216"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="0.029940119760479042"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="0.06706586826347305"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="0.026347305389221556"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="0.03832335329341317"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="0.04311377245508982"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="0.025149700598802394"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="0.027544910179640718"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="0.058682634730538925"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="0.023952095808383235"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="0.025149700598802394"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="0.06227544910179641"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="0.023952095808383235"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="0.06227544910179641"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="0.06227544910179641"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="0.09700598802395209"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="0.2179640718562874"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="0.017241379310344827"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="0.015086206896551725"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="0.015086206896551725"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="0.01293103448275862"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="0.01293103448275862"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="0.03879310344827586"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="0.03879310344827586"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="0.034482758620689655"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="0.02586206896551724"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="0.01939655172413793"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="0.04525862068965517"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="0.04525862068965517"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="0.028017241379310345"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="0.16810344827586207"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="0.015086206896551725"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="0.01293103448275862"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="0.032327586206896554"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="0.01293103448275862"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="0.034482758620689655"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="0.036637931034482756"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="0.008620689655172414"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="0.0603448275862069"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="0.14224137931034483"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="0.04310344827586207"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitDeleteCommand(T)" value="0.048"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitInsertCommand(T)" value="0.048"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor.visitKeepCommand(T)" value="0.048"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="0.2777777777777778"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="0.13636363636363635"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.accept(CommandVisitor&lt;T&gt;)" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="0.12121212121212122"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="0.07920792079207921"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="0.0891089108910891"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="0.0891089108910891"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="0.0891089108910891"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="0.09900990099009901"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="0.09900990099009901"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="0.1188118811881188"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="0.21621621621621623"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="0.2972972972972973"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="0.11458333333333333"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="0.09375"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="0.09375"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="0.20833333333333334"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="0.19230769230769232"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="0.11538461538461539"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="0.11538461538461539"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="0.11538461538461539"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="0.23076923076923078"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="0.07407407407407407"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="0.24074074074074073"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsHandler.handleReplacement(int, List&lt;T&gt;, List&lt;T&gt;)" value="0.71875"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="0.07142857142857142"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="0.15"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="0.06428571428571428"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="0.2892857142857143"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="0.06785714285714285"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="0.4368932038834951"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="0.05825242718446602"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="0.07766990291262135"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="0.06796116504854369"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="0.06796116504854369"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="0.029411764705882353"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="0.20098039215686275"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="0.19607843137254902"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="0.10784313725490197"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="0.04411764705882353"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="0.06372549019607843"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="0.06372549019607843"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="0.06862745098039216"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="0.049019607843137254"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="0.05185185185185185"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="0.02962962962962963"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="0.03333333333333333"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="0.04814814814814815"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="0.05925925925925926"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="0.022222222222222223"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="0.022222222222222223"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="0.07037037037037037"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="0.5259259259259259"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="0.02962962962962963"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="0.039603960396039604"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="0.0594059405940594"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="0.04455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="0.04455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="0.04455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="0.04455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="0.054455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="0.04950495049504951"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="0.0594059405940594"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="0.054455445544554455"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="0.039603960396039604"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="0.06930693069306931"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="0.07920792079207921"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="0.0594059405940594"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="0.039603960396039604"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="0.12727272727272726"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="0.41818181818181815"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="0.34545454545454546"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="0.8181818181818182"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="0.06086956521739131"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="0.06086956521739131"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="0.06086956521739131"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="0.06086956521739131"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="0.5277777777777778"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="0.19047619047619047"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="0.7142857142857143"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="0.2777777777777778"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="0.2777777777777778"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="0.10666666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="0.05333333333333334"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="0.05333333333333334"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="0.3972602739726027"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="0.0547945205479452"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="0.0547945205479452"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="0.0547945205479452"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="0.1095890410958904"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="0.0684931506849315"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="0.5686274509803921"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="0.4444444444444444"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="0.05"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="0.10833333333333334"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="0.3"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="0.14166666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="0.12727272727272726"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="0.12727272727272726"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="0.16363636363636364"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="0.06862745098039216"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="0.06862745098039216"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="0.06862745098039216"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="0.09803921568627451"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="0.06862745098039216"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="0.0784313725490196"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="0.08823529411764706"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="0.09230769230769231"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="0.3230769230769231"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="0.16923076923076924"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="0.0546448087431694"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="0.04371584699453552"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="0.04371584699453552"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="0.20930232558139536"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="0.6744186046511628"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="0.07692307692307693"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="0.3974358974358974"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="0.12"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="0.12"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="0.12"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="0.12"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="0.24"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="0.08"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="0.1"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="0.4166666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="0.20833333333333334"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="0.12121212121212122"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="0.4090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="0.03296703296703297"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="0.04395604395604396"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="0.04395604395604396"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="0.04395604395604396"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="0.07692307692307693"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="0.06593406593406594"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="0.06593406593406594"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="0.06593406593406594"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="0.054945054945054944"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="0.06593406593406594"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="0.08791208791208792"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="0.11428571428571428"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="0.35714285714285715"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="0.05714285714285714"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="0.26666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="0.3055555555555556"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="0.13636363636363635"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="0.08181818181818182"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="0.13636363636363635"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="0.10909090909090909"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="0.3"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="0.0625"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="0.075"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="0.0625"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="0.2125"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="0.075"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="0.05"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="0.05"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="0.05"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="0.0625"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="0.03314917127071823"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="0.055248618784530384"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="0.04419889502762431"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="0.055248618784530384"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="0.049723756906077346"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="0.049723756906077346"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="0.07734806629834254"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="0.049723756906077346"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="0.2154696132596685"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="0.07734806629834254"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="0.5098039215686274"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="0.12121212121212122"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="0.12121212121212122"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="0.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="0.1095890410958904"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="0.4931506849315068"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="0.0821917808219178"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="0.08181818181818182"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="0.08181818181818182"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="0.03636363636363636"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="0.06363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="0.06363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="0.06818181818181818"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="0.10227272727272728"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="0.03409090909090909"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="0.45454545454545453"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="0.045454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="0.12727272727272726"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="0.12727272727272726"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="0.10909090909090909"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="0.07272727272727272"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="0.8235294117647058"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="0.5238095238095238"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="0.11363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="0.11363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookup.lookup(String)" value="0.6190476190476191"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="0.4642857142857143"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="0.12643678160919541"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="0.16091954022988506"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="0.28735632183908044"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="0.09195402298850575"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="0.22988505747126436"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="0.003843689942344651"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="0.003843689942344651"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="0.008327994875080076"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="0.017937219730941704"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="0.007687379884689302"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="0.005765534913516977"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="0.005124919923126201"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="0.023062139654067906"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="0.024343369634849454"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="0.016015374759769378"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="0.04035874439461883"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="0.019218449711723255"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="0.007046764894298526"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="0.010249839846252402"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="0.007046764894298526"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="0.0064061499039077515"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="0.02370275464445868"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="0.01985906470211403"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="0.0064061499039077515"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="0.005124919923126201"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="0.04676489429852659"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="0.025624599615631006"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="0.01985906470211403"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="0.024983984625240232"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="0.016655989750160152"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="0.005765534913516977"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="0.007046764894298526"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="0.020499679692504803"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="0.020499679692504803"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="0.026905829596412557"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="0.020499679692504803"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="0.020499679692504803"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="0.023062139654067906"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="0.024343369634849454"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="0.03074951953875721"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="0.047619047619047616"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="0.031746031746031744"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="0.06349206349206349"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="0.031746031746031744"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="0.021164021164021163"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="0.042328042328042326"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="0.031746031746031744"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="0.042328042328042326"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="0.047619047619047616"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="0.047619047619047616"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="0.15873015873015872"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="0.042328042328042326"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="0.17647058823529413"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="0.08823529411764706"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="0.38235294117647056"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="0.20588235294117646"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="0.14705882352941177"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="0.17647058823529413"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="0.08823529411764706"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="0.38235294117647056"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="0.2692307692307692"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="0.19230769230769232"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="0.6349206349206349"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="0.20454545454545456"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="0.11363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="0.11363636363636363"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="0.15789473684210525"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="0.1388888888888889"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="0.4583333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="0.11320754716981132"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="0.07547169811320754"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="0.07547169811320754"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="0.20754716981132076"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="0.11320754716981132"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="0.07547169811320754"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="0.07547169811320754"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="0.09433962264150944"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="0.23529411764705882"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="0.23529411764705882"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="0.23529411764705882"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="0.012987012987012988"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="0.14516129032258066"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="0.25806451612903225"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="0.25806451612903225"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="0.16129032258064516"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="0.1125"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="0.2875"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="0.2875"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="0.1125"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="0.05"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="0.14035087719298245"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="0.22807017543859648"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="0.22807017543859648"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="0.15789473684210525"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="0.07017543859649122"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="0.15517241379310345"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="0.22413793103448276"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="0.22413793103448276"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="0.15517241379310345"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="0.06896551724137931"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="0.10416666666666667"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="0.2708333333333333"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="0.2708333333333333"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="0.1875"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="0.09615384615384616"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="0.25"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="0.17307692307692307"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="0.07633587786259542"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="0.183206106870229"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="0.22900763358778625"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="0.183206106870229"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int, int, int)" value="0.20610687022900764"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="0.06870229007633588"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="0.028708133971291867"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="0.08133971291866028"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="0.0430622009569378"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="0.07655502392344497"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="0.07655502392344497"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="0.0430622009569378"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="0.06220095693779904"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="0.03827751196172249"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="0.6666666666666666"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="0.04195804195804196"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="0.09090909090909091"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="0.08391608391608392"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="0.11888111888111888"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="0.04895104895104895"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="0.0473186119873817"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="0.04100946372239748"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="0.05993690851735016"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="0.08201892744479496"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="0.08201892744479496"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="0.04416403785488959"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="0.03785488958990536"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="0.03470031545741325"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="0.10725552050473186"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="0.04416403785488959"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="0.04416403785488959"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="0.04416403785488959"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="0.08201892744479496"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="0.0694006309148265"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="0.015772870662460567"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="0.012618296529968454"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="0.04416403785488959"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="0.08201892744479496"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="0.04838709677419355"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="0.041935483870967745"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="0.06129032258064516"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="0.08387096774193549"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="0.08387096774193549"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="0.04516129032258064"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="0.03870967741935484"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="0.035483870967741936"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="0.10967741935483871"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="0.04516129032258064"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="0.04516129032258064"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="0.04516129032258064"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="0.08387096774193549"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="0.07741935483870968"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="0.04516129032258064"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="0.08387096774193549"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="0.3064516129032258"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="0.3064516129032258"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="0.3064516129032258"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="0.16030534351145037"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="0.08396946564885496"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="0.10687022900763359"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.05343511450381679"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="0.03816793893129771"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="0.025889967637540454"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="0.042071197411003236"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="0.038834951456310676"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="0.032362459546925564"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="0.03559870550161812"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="0.05177993527508091"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="0.038834951456310676"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="0.0744336569579288"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="0.02912621359223301"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="0.04854368932038835"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="0.042071197411003236"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="0.03559870550161812"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="0.042071197411003236"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="0.03559870550161812"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="0.03559870550161812"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="0.042071197411003236"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="0.032362459546925564"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="0.03559870550161812"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="0.07119741100323625"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="0.07119741100323625"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="0.011730205278592375"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="0.4444444444444444"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.2777777777777778"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="0.3448275862068966"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.3103448275862069"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="0.4"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.35"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="0.4444444444444444"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.2777777777777778"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="0.011730205278592375"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="0.05525846702317291"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="0.012477718360071301"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="0.0053475935828877"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="0.0196078431372549"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="0.0427807486631016"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="0.05525846702317291"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="0.008912655971479501"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="0.0142602495543672"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="0.026737967914438502"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="0.023172905525846704"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="0.024955436720142603"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="0.08021390374331551"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="0.06060606060606061"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="0.016042780748663103"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="0.0142602495543672"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="0.016042780748663103"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="0.024955436720142603"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="0.08377896613190731"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="0.008912655971479501"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="0.053475935828877004"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="0.0071301247771836"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="0.08021390374331551"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="0.058823529411764705"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="0.023172905525846704"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="0.08021390374331551"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="0.058823529411764705"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="0.016042780748663103"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="0.024955436720142603"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getDecimalSeparator()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getDigits()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getExponentSeparatorChars()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getGroupingSeparator()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.getMinusSign()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isAlwaysIncludeExponent()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isGroupThousands()" value="0.09259259259259259"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isIncludeFractionPlaceholder()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions.isSignedZero()" value="0.1111111111111111"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="0.02118003025718608"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="0.01059001512859304"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="0.037821482602118005"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="0.04236006051437216"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="0.05446293494704992"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="0.08623298033282904"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="0.046898638426626324"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="0.012102874432677761"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="0.024205748865355523"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="0.012102874432677761"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="0.024205748865355523"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="0.028744326777609682"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="0.012102874432677761"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="0.015128593040847202"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="0.03177004538577912"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="0.04084720121028744"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="0.01664145234493192"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="0.015128593040847202"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="0.01361573373676248"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="0.028744326777609682"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="0.03177004538577912"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="0.04084720121028744"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="0.028744326777609682"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="0.07413010590015129"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="0.025718608169440244"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="0.05405405405405406"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="0.04054054054054054"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="0.0106951871657754"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="0.0106951871657754"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="0.0142602495543672"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="0.008912655971479501"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="0.008912655971479501"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="0.016042780748663103"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="0.0071301247771836"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="0.0071301247771836"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="0.012477718360071301"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="0.0106951871657754"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="0.0196078431372549"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="0.03208556149732621"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="0.058823529411764705"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="0.0213903743315508"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="0.0213903743315508"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="0.030303030303030304"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="0.026737967914438502"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="0.026737967914438502"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="0.030303030303030304"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="0.017825311942959002"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="0.049910873440285206"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="0.030303030303030304"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="0.030303030303030304"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="0.035650623885918005"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="0.0374331550802139"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="0.0427807486631016"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="0.03208556149732621"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="0.0570409982174688"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="0.04634581105169341"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="0.040998217468805706"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="0.030303030303030304"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="0.34615384615384615"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="0.23684210526315788"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="0.18421052631578946"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="0.34210526315789475"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="0.38461538461538464"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="0.23076923076923078"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="0.17857142857142858"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="0.25"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="0.2857142857142857"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="0.21428571428571427"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="0.15151515151515152"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="0.45454545454545453"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="0.16049382716049382"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="0.12345679012345678"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="0.09876543209876543"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="0.09876543209876543"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="0.1320754716981132"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="0.5943396226415094"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="0.07547169811320754"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="0.2564102564102564"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="0.1794871794871795"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="0.10256410256410256"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="0.7592592592592593"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="0.13793103448275862"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="0.3793103448275862"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="0.13793103448275862"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="0.13793103448275862"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="0.25274725274725274"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="0.12087912087912088"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="0.08791208791208792"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="0.08791208791208792"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="0.08791208791208792"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="0.04395604395604396"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="0.04395604395604396"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="0.1743119266055046"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="0.14678899082568808"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="0.07339449541284404"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="0.06422018348623854"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="0.06422018348623854"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="0.06422018348623854"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="0.06422018348623854"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="0.13761467889908258"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="0.1651376146788991"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="0.25"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="0.09326424870466321"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="0.18518518518518517"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="0.14814814814814814"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="0.21761658031088082"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="0.09326424870466321"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="0.09326424870466321"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="0.06217616580310881"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="0.025547445255474453"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="0.01824817518248175"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="0.01824817518248175"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="0.01824817518248175"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="0.014598540145985401"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="0.22992700729927007"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="0.08394160583941605"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="0.08029197080291971"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="0.08394160583941605"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="0.08029197080291971"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="0.06204379562043796"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="0.072992700729927"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="0.072992700729927"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="0.051094890510948905"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="0.051094890510948905"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="0.01824817518248175"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="0.5483870967741935"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="0.4634146341463415"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="0.2537313432835821"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="0.47761194029850745"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="0.4634146341463415"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="0.6"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="0.2"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="0.0975609756097561"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="0.4634146341463415"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="0.35507246376811596"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="0.4492753623188406"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="0.06060606060606061"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="0.06060606060606061"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="0.06060606060606061"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="0.06060606060606061"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="0.30303030303030304"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="0.36363636363636365"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="0.02826086956521739"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="0.02826086956521739"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="0.08478260869565217"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="0.1891304347826087"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="0.017391304347826087"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="0.017391304347826087"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="0.36086956521739133"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="0.22826086956521738"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="0.022284122562674095"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="0.027855153203342618"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="0.03899721448467967"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="0.025069637883008356"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="0.025069637883008356"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="0.011142061281337047"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="0.14763231197771587"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="0.5515320334261838"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="0.013927576601671309"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="0.036211699164345405"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="0.036211699164345405"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="0.03170028818443804"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="0.040345821325648415"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="0.11239193083573487"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="0.023054755043227664"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="0.023054755043227664"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="0.4697406340057637"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="0.2276657060518732"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="0.13"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="0.53"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="0.04"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="0.15463917525773196"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="0.13402061855670103"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="0.08247422680412371"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="0.08247422680412371"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="0.08247422680412371"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="0.08247422680412371"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="0.041237113402061855"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="0.05154639175257732"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="0.18421052631578946"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="0.2631578947368421"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="0.15789473684210525"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="0.18421052631578946"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="0.15789473684210525"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="0.13970588235294118"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="0.16911764705882354"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="0.13970588235294118"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="0.10294117647058823"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="0.17279411764705882"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="0.11764705882352941"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="0.014705882352941176"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="0.48717948717948717"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="0.10526315789473684"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="0.42105263157894735"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="0.10526315789473684"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="0.10526315789473684"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="0.10526315789473684"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="0.049019607843137254"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="0.049019607843137254"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="0.049019607843137254"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="0.0392156862745098"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="0.18627450980392157"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="0.17647058823529413"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="0.1568627450980392"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="0.5483870967741935"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="0.22580645161290322"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="0.8125"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="0.109375"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="0.48148148148148145"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="0.25925925925925924"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="0.46875"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScore.apply(CharSequence, CharSequence)" value="0.2"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="0.16049382716049382"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="0.12345679012345678"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="0.09876543209876543"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="0.09876543209876543"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="0.5384615384615384"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="0.3076923076923077"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="0.2702702702702703"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="0.4864864864864865"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="0.10810810810810811"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="0.2702702702702703"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="0.40540540540540543"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="0.5142857142857142"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="0.17142857142857143"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="0.17142857142857143"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="0.09433962264150944"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="0.16981132075471697"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="0.36792452830188677"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, int, Writer)" value="0.12264150943396226"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="0.12264150943396226"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="0.2608695652173913"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(int, Writer)" value="0.391304347826087"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="0.8181818181818182"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="0.7058823529411765"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="0.03278688524590164"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="0.7619047619047619"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="0.09782608695652174"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="0.022332506203473945"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="0.10975609756097561"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="0.2926829268292683"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="0.04878048780487805"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="0.19230769230769232"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="0.1282051282051282"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="0.1282051282051282"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="0.15384615384615385"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="0.21052631578947367"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="0.23684210526315788"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="0.4647887323943662"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="0.323943661971831"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="0.23809523809523808"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="0.2619047619047619"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="0.2857142857142857"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="0.07317073170731707"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="0.17073170731707318"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="0.10975609756097561"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="0.10975609756097561"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="0.12195121951219512"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="0.12195121951219512"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="0.15853658536585366"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="0.2571428571428571"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="0.07894736842105263"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="0.49122807017543857"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="0.11864406779661017"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="0.11864406779661017"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="0.13559322033898305"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="0.13559322033898305"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="0.4067796610169492"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="0.16666666666666666"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="0.4444444444444444"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="0.8913043478260869"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="0.25"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="0.3611111111111111"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translateWhole(CharSequence, Writer)" value="0.2222222222222222"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="0.2"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="0.13333333333333333"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="0.05714285714285714"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="0.14285714285714285"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="0.08571428571428572"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="0.08571428571428572"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="0.09523809523809523"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="0.21904761904761905"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="0.27586206896551724"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="0.27586206896551724"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="0.27586206896551724"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="0.775"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="0.24"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="0.28"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="0.28"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="0.5625"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="0.3157894736842105"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="0.3157894736842105"/>
		<VALUE measured="test(int)" value="0.7142857142857143"/>
		<VALUE measured="toString()" value="0.6666666666666666"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="0.6666666666666666"/>
	</METRIC>
	<METRIC category="Method" name="Cyclomatic complexity" abbreviation="v(G)">
		<VALUE measured="isMatch(char[], int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="1.0"/>
		<VALUE measured="test(int)" value="3.0"/>
		<VALUE measured="toString()" value="1.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="1.0"/>
	</METRIC>
	<METRIC category="Class" name="Coupling between objects" abbreviation="CBO">
		<VALUE measured="org.apache.commons.text.AlphabetConverter" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicates" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OverrideShortDateFormatFactory" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher" value="13.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor" value="15.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder" value="13.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader" value="5.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup" value="22.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory" value="38.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest" value="19.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher" value="5.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory" value="18.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal" value="8.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator" value="22.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.OPTION" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest" value="1.0"/>
	</METRIC>
	<METRIC category="Interface" name="Coupling between objects" abbreviation="CBO">
		<VALUE measured="org.apache.commons.text.Builder" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicate" value="4.0"/>
		<VALUE measured="org.apache.commons.text.FormatFactory" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextRandomProvider" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.CommandVisitor" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsHandler" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookup" value="17.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher" value="18.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.FormatOptions" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CharSequenceTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistance" value="11.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScore" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Tokenizer" value="1.0"/>
	</METRIC>
	<METRIC category="Package" name="Comment lines of code" abbreviation="CLOC">
		<VALUE measured="org.apache.commons.text" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="0.0"/>
		<VALUE measured="org.apache.commons.text.example" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="0.0"/>
	</METRIC>
	<METRIC category="Package" name="Comment lines of code (recursive)" abbreviation="CLOC(rec)">
		<VALUE measured="" value="4839.0"/>
		<VALUE measured="org" value="4839.0"/>
		<VALUE measured="org.apache" value="4839.0"/>
		<VALUE measured="org.apache.commons" value="4839.0"/>
		<VALUE measured="org.apache.commons.text" value="4839.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="205.0"/>
		<VALUE measured="org.apache.commons.text.example" value="14.0"/>
		<VALUE measured="org.apache.commons.text.io" value="85.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="34.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="972.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="213.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="216.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1017.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="781.0"/>
	</METRIC>
	<METRIC category="Package" name="Javadoc lines of code" abbreviation="JLOC">
		<VALUE measured="org.apache.commons.text" value="8566.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="575.0"/>
		<VALUE measured="org.apache.commons.text.io" value="84.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="91.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="2524.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="462.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="768.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1332.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="492.0"/>
	</METRIC>
	<METRIC category="Package" name="Javadoc lines of code (recursive)" abbreviation="JLOC(rec)">
		<VALUE measured="" value="14897.0"/>
		<VALUE measured="org" value="14897.0"/>
		<VALUE measured="org.apache" value="14897.0"/>
		<VALUE measured="org.apache.commons" value="14897.0"/>
		<VALUE measured="org.apache.commons.text" value="14897.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="575.0"/>
		<VALUE measured="org.apache.commons.text.io" value="84.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="91.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="2527.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="462.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="768.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1332.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="492.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of code" abbreviation="LOC">
		<VALUE measured="org.apache.commons.text" value="26925.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="1201.0"/>
		<VALUE measured="org.apache.commons.text.example" value="18.0"/>
		<VALUE measured="org.apache.commons.text.io" value="562.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="396.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="5849.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="41.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="1721.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="2583.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="4786.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="2355.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of code (recursive)" abbreviation="LOC(rec)">
		<VALUE measured="" value="46437.0"/>
		<VALUE measured="org" value="46437.0"/>
		<VALUE measured="org.apache" value="46437.0"/>
		<VALUE measured="org.apache.commons" value="46437.0"/>
		<VALUE measured="org.apache.commons.text" value="46437.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="1201.0"/>
		<VALUE measured="org.apache.commons.text.example" value="18.0"/>
		<VALUE measured="org.apache.commons.text.io" value="562.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="396.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="5890.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="41.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="1721.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="2583.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="4786.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="2355.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of product code" abbreviation="LOCp">
		<VALUE measured="org.apache.commons.text" value="14953.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="994.0"/>
		<VALUE measured="org.apache.commons.text.example" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io" value="324.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="3846.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="806.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1406.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="2842.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="1536.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of product code (recursive)" abbreviation="LOCp(rec)">
		<VALUE measured="" value="26707.0"/>
		<VALUE measured="org" value="26707.0"/>
		<VALUE measured="org.apache" value="26707.0"/>
		<VALUE measured="org.apache.commons" value="26707.0"/>
		<VALUE measured="org.apache.commons.text" value="26707.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="994.0"/>
		<VALUE measured="org.apache.commons.text.example" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io" value="324.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="3846.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="806.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1406.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="2842.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="1536.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of test code" abbreviation="LOCt">
		<VALUE measured="org.apache.commons.text" value="11972.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="207.0"/>
		<VALUE measured="org.apache.commons.text.example" value="18.0"/>
		<VALUE measured="org.apache.commons.text.io" value="238.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="396.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="2003.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="41.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="915.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1177.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1944.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="819.0"/>
	</METRIC>
	<METRIC category="Package" name="Lines of test code (recursive)" abbreviation="LOCt(rec)">
		<VALUE measured="" value="19730.0"/>
		<VALUE measured="org" value="19730.0"/>
		<VALUE measured="org.apache" value="19730.0"/>
		<VALUE measured="org.apache.commons" value="19730.0"/>
		<VALUE measured="org.apache.commons.text" value="19730.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="207.0"/>
		<VALUE measured="org.apache.commons.text.example" value="18.0"/>
		<VALUE measured="org.apache.commons.text.io" value="238.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="396.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="2044.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="41.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="915.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1177.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1944.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="819.0"/>
	</METRIC>
	<METRIC category="Package" name="Non-comment lines of code" abbreviation="NCLOC">
		<VALUE measured="org.apache.commons.text" value="25696.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="998.0"/>
		<VALUE measured="org.apache.commons.text.example" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io" value="477.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="362.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="4896.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="25.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="1508.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="2367.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="3803.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="1831.0"/>
	</METRIC>
	<METRIC category="Package" name="Non-comment lines of code (product)" abbreviation="NCLOCp">
		<VALUE measured="org.apache.commons.text" value="14442.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="825.0"/>
		<VALUE measured="org.apache.commons.text.example" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io" value="261.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="3391.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="728.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1314.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="2245.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="1237.0"/>
	</METRIC>
	<METRIC category="Package" name="Non-comment lines of code (product, recursive)" abbreviation="NCLOCp(rec)">
		<VALUE measured="" value="24443.0"/>
		<VALUE measured="org" value="24443.0"/>
		<VALUE measured="org.apache" value="24443.0"/>
		<VALUE measured="org.apache.commons" value="24443.0"/>
		<VALUE measured="org.apache.commons.text" value="24443.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="825.0"/>
		<VALUE measured="org.apache.commons.text.example" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io" value="261.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="3391.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="728.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1314.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="2245.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="1237.0"/>
	</METRIC>
	<METRIC category="Package" name="Non-comment lines of code (test)" abbreviation="NCLOCt">
		<VALUE measured="org.apache.commons.text" value="11254.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="173.0"/>
		<VALUE measured="org.apache.commons.text.example" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io" value="216.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="362.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="1505.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="25.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="780.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1053.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1558.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="594.0"/>
	</METRIC>
	<METRIC category="Package" name="Non-comment lines of code (test, recursive)" abbreviation="NCLOCt(rec)">
		<VALUE measured="" value="17524.0"/>
		<VALUE measured="org" value="17524.0"/>
		<VALUE measured="org.apache" value="17524.0"/>
		<VALUE measured="org.apache.commons" value="17524.0"/>
		<VALUE measured="org.apache.commons.text" value="17524.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="173.0"/>
		<VALUE measured="org.apache.commons.text.example" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io" value="216.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="362.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="1530.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="25.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="780.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1053.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="1558.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="594.0"/>
	</METRIC>
	<METRIC category="FileType" name="Number of files" abbreviation="FILES">
		<VALUE measured=".gitignore (GitIgnore)" value="1.0"/>
		<VALUE measured="File type auto-detected by file content" value="1.0"/>
		<VALUE measured="Java" value="201.0"/>
		<VALUE measured="Markdown" value="4.0"/>
		<VALUE measured="Properties" value="2.0"/>
		<VALUE measured="Shell script" value="1.0"/>
		<VALUE measured="Text" value="8.0"/>
		<VALUE measured="XML" value="17.0"/>
		<VALUE measured="YAML" value="5.0"/>
	</METRIC>
	<METRIC category="FileType" name="Lines of code" abbreviation="LOC">
		<VALUE measured=".gitignore (GitIgnore)" value="18.0"/>
		<VALUE measured="File type auto-detected by file content" value="0.0"/>
		<VALUE measured="Java" value="46376.0"/>
		<VALUE measured="Markdown" value="222.0"/>
		<VALUE measured="Properties" value="33.0"/>
		<VALUE measured="Shell script" value="4.0"/>
		<VALUE measured="Text" value="904.0"/>
		<VALUE measured="XML" value="2516.0"/>
		<VALUE measured="YAML" value="225.0"/>
	</METRIC>
	<METRIC category="Project" name="Number of classes" abbreviation="C">
		<VALUE measured="project" value="274.0"/>
	</METRIC>
</METRICS>
