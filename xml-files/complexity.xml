<METRICS profile="Complexity metrics" timestamp="Fri, 9 Aug 2024 11:51:29 NZST">
	<METRIC category="Method" name="Cognitive complexity" abbreviation="CogC">
		<VALUE measured="append(StrBuilder)" value="0.0"/>
		<VALUE measured="append(StrBuilder, int, int)" value="0.0"/>
		<VALUE measured="append(String)" value="0.0"/>
		<VALUE measured="append(String, int, int)" value="0.0"/>
		<VALUE measured="append(StringBuffer)" value="0.0"/>
		<VALUE measured="append(StringBuffer, int, int)" value="0.0"/>
		<VALUE measured="append(StringBuilder)" value="0.0"/>
		<VALUE measured="append(StringBuilder, int, int)" value="0.0"/>
		<VALUE measured="append(char[])" value="0.0"/>
		<VALUE measured="append(char[], int, int)" value="0.0"/>
		<VALUE measured="appendNewLine()" value="0.0"/>
		<VALUE measured="charAt(int)" value="0.0"/>
		<VALUE measured="cloneReset()" value="0.0"/>
		<VALUE measured="fetchClass(String)" value="0.0"/>
		<VALUE measured="format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="length()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="18.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="29.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="20.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="109.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="100.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="24.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="44.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="44.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="48.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="21.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="38.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="26.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="36.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="0.0"/>
		<VALUE measured="parseObject(String, ParsePosition)" value="0.0"/>
		<VALUE measured="resolveVariable(String, StrBuilder, int, int)" value="0.0"/>
		<VALUE measured="resolveVariable(String, TextStringBuilder, int, int)" value="0.0"/>
		<VALUE measured="subSequence(int, int)" value="0.0"/>
		<VALUE measured="test(int)" value="1.0"/>
		<VALUE measured="toString()" value="0.0"/>
		<VALUE measured="tokenize(char[], int, int)" value="0.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="0.0"/>
	</METRIC>
	<METRIC category="Method" name="Essential cyclomatic complexity" abbreviation="ev(G)">
		<VALUE measured="isMatch(char[], int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="1.0"/>
		<VALUE measured="test(int)" value="1.0"/>
		<VALUE measured="toString()" value="1.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="1.0"/>
	</METRIC>
	<METRIC category="Method" name="Design complexity" abbreviation="iv(G)">
		<VALUE measured="isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="17.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="1.0"/>
		<VALUE measured="test(int)" value="3.0"/>
		<VALUE measured="toString()" value="1.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="1.0"/>
	</METRIC>
	<METRIC category="Method" name="Cyclomatic complexity" abbreviation="v(G)">
		<VALUE measured="isMatch(char[], int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.AlphabetConverter(Map&lt;Integer, String&gt;, Map&lt;String, String&gt;, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.addSingleEncoding(int, String, Collection&lt;Integer&gt;, Iterator&lt;Integer&gt;, Map&lt;Integer, String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.codePointToString(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverter(Integer[], Integer[], Integer[])" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[], Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map&lt;Integer, String&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.decode(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.encode(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getEncodedCharLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.getOriginalToEncoded()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverter.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.createJavadocExample()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.test(Character[], Character[], Character[], String...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testBinaryTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromCharsWithNullAndNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testCreateConverterFromMapAndEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDecodeReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testDoNotEncodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEncodeFailureTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testEqualsWithSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testHebrewTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testJavadocExampleTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromEncodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testMissingDoNotEncodeLettersFromOriginalTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testNoEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testOnlyOneEncodingLettersTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedEndWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnexpectedStringWhileDecodingTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest.testUnicodeTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.CaseUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toCamelCase(String, boolean, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils.toDelimiterSet(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest.testToCamelCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testArabicNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiAlphaNumerals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiLowercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testAsciiUppercaseLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest.testLetters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.CompositeFormat(Format, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.getParser()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat.reformat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testCompositeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest.testUsage()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.ExtendedMessageFormat(String, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.appendQuotedString(String, ParsePosition, StringBuilder)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.applyPattern(String)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.containsElements(Collection&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getFormat(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.getQuotedString(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.insertFormats(String, ArrayList&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.next(ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.parseFormatDescription(String, ParsePosition)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.readArgumentIndex(String, ParsePosition)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.seekNonWs(String, ParsePosition)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormat(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, Format)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormats(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.setFormatsByArgumentIndex(Format[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat.toPattern()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat.OtherExtendedMessageFormat(String, Locale, Map&lt;String, ? extends FormatFactory&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.format(Object, StringBuffer, FieldPosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat.parseObject(String, ParsePosition)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Map&lt;String, ?&gt;, Object[], Locale[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.checkBuiltInFormat(String, Object[], Locale[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.createMessageFormat(String, Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInChoiceFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInDateTimeFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testBuiltInNumberFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testChoiceQuoteJustBeforeBraceEnd_TEXT_106()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testCreatesExtendedMessageFormatTakingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedBraces_LANG_948()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testExtendedFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatByArgumentIndexIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsByArgumentIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.testSetFormatsIsUnsupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.FormattableUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.append(CharSequence, Formatter, int, int, int, char, CharSequence)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils.toString(Formattable)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.SimplestFormattable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable.formatTo(Formatter, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.createFormatter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharAndEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAlternatePadCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testAppendWithNullFormatterAndIntsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testDefaultAppend()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsis()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testIllegalEllipsisWith7Args()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testPublicConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.testSimplestFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.filteredBy(CharacterPredicate...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.selectFrom(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.usingRandom(TextRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(char[]...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder.withinRange(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.RandomStringGenerator(int, int, Set&lt;CharacterPredicate&gt;, TextRandomProvider, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generate(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(List&lt;Character&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.generateRandomNumber(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.codePointLength(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMaximumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinAndMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testBadMinimumCodePoint()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testChangeOfFilter()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateMinMaxLengthMinGreaterThanMax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testGenerateTakingIntThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testInvalidLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testMultipleFilters()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoLoneSurrogates()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testNoPrivateCharacters()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testRemoveFilters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargSize1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromCharVarargs2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromEmptyCharVarargs()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSelectFromNullCharVarargs()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testUsingRandom()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinMultipleRanges()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testWithinRange()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest.testZeroLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilder(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.StrBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.read(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader.skip(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.StrBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.StrBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StrBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(String, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(StringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(Iterator&lt;?&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.charAt(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteCharAt(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equals(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.equalsIgnoreCase(StrBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getChars(int, int, char[], int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.hashCode()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(StrMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(String, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(StrMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.midString(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.readFrom(Readable)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(StrMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceAll(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(StrMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(StrMatcher, String, int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.reverse()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setCharAt(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setLength(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.setNullText(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.trim()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateIndex(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.validateRange(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppend_String_int_int()" value="7.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsReader()" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReplace_int_int_String()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.test_LANG_1131_EqualsWithNullStrBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.MapStrLookup(Map&lt;String, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.ResourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.StrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.SystemPropertiesStrLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.mapLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.noneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.systemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testMapLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testNoneLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testResourceBundleLookup_nullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupReplacedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest.testSystemPropertiesLookupUpdatedProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.NoMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.StringMatcher(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.stringMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherImpl(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherPrefixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.assertStrMatcherSuffixImpl(String, StrSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, StrMatcher, StrMatcher, char, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.StrSubstitutor(StrLookup&lt;?&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableResolver()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.resolveVariable(String, StrBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setValueDelimiterMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariablePrefixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableResolver(StrLookup&lt;?&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.setVariableSuffixMatcher(StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor.substitute(StrBuilder, int, int, List&lt;String&gt;)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestNoReplace(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(StrSubstitutor, String, String, boolean)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.doTestReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapFull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorMapPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testConstructorNoArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testCyclicReplacement()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDefaultValueDelimiters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEmptyKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSolo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceSoloEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], StrMatcher, StrMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.StrTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.addToken(List&lt;String&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.clone()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readNextToken(char[], int, int, StrBuilder, List&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.readWithQuotes(char[], int, int, StrBuilder, List&lt;String&gt;, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setIgnoredMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setQuoteMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.setTrimmerMatcher(StrMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.checkClone(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testEmpty(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest.testXSVAbc(StrTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.Builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.escape(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.StringEscapeUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper.translate(CharSequence, int, Writer)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml10(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.escapeXml11(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJava(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeJson(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.unescapeXml(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertEscapeJava(String, String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.assertUnescapeJava(String, String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvEscapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.checkCsvUnescapeWriter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testDeleteCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeEcmaScript()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHiragana()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtml4()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlThree()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeHtmlVersions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJava()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJavaWithSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeJson()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml10()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testEscapeXml11()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang313()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang708()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testLang911()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testStandaloneAmphersand()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeCsvWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeEcmaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHexCharsHtml()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml3()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeHtml4()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJava()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJson()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeJsonDoubleQuoteAndForwardSlash()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeUnknownEntity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest.testUnscapeXSI()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.Result(boolean, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(Map&lt;String, V&gt;, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, String, String, char, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringLookup, StringMatcher, StringMatcher, char, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.StringSubstitutor(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.checkCyclicSubstitution(String, List&lt;String&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.createInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getEscapeChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getValueDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariablePrefixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.getVariableSuffixMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isDisableSubstitutionInValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableSubstitutionInVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isEnableUndefinedVariableException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.isPreserveEscapes()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(CharSequence, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Map&lt;String, V&gt;, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(Object, Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(String, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(StringBuffer, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replace(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuffer, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(StringBuilder, int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceIn(TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.resolveVariable(String, TextStringBuilder, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setDisableSubstitutionInValues(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableSubstitutionInVariables(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEnableUndefinedVariableException(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setEscapeChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setPreserveEscapes(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiter(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setValueDelimiterMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariablePrefixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableResolver(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffix(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.setVariableSuffixMatcher(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.substitute(TextStringBuilder, int, int, List&lt;String&gt;)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.assertEqualsCharSeq(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doNotReplace(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doReplace(String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestNoReplace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.replace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorNullMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testConstructorStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testGetSetEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testLANG1055()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceAdjacentAtStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceChangedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceComplexEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyKeyWithDefaultOnlyShortest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceEscaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceFailOnUndefinedVariableWithReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBufferWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingStringBuilderWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInTakingTwoAndThreeIntsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableDisabled()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceInVariableRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceIncompletePrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars1Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceKeyStartChars2Only()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoPrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNoVariables()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePartialString_noReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplacePrefixNoSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceRecursive()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceSimpleKeySize3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingCharSequenceReturningNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceTakingThreeArgumentsThrowsNullPointerException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceToIdentical()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyDefaultValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnly()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraFirst()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceUnknownShortestKeyOnlyExtraLast()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping2To1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping3To2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping4To3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping5To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount1Escaping6To4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount2NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceVariablesCount3NonAdjacent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplaceWeirdPattens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testReplace_JiraText178_WeirdPatterns3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testResolveVariable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSamePrefixAndSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplacePrefixSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testStaticReplaceSystemPropertiesWithUpdate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstituteDefaultProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest.testSubstitutePreserveEscape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.createInterpolatorWithLookups(DefaultStringLookup...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomFunctionWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithDefaults(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testCustomMapWithoutDefaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDefaultValueForMissingKeyInResourceBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupNameUntrimmed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookupUnknown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testDnsLookup_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testJavaScript_disabledByDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Address()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_CanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testLocalHostLookup_Name()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testMapAndSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemProperty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest.testSystemPropertyDefaultStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(String, char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], StringMatcher, StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.StringTokenizer(char[], char, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.add(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.addToken(List&lt;String&gt;, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.checkTokenized()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.clone()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.cloneReset()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getCSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getDelimiterMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getIgnoredMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVClone()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTSVInstance(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTokenList()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.getTrimmerMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasNext()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.hasPrevious()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isIgnoreEmptyTokens()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.isQuote(char[], int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.next()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.nextToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previous()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.previousToken()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readNextToken(char[], int, int, TextStringBuilder, List&lt;String&gt;)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.readWithQuotes(char[], int, int, TextStringBuilder, List&lt;String&gt;, int, int)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.remove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.reset(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.set(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setDelimiterString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setEmptyTokenAsNull(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoreEmptyTokens(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setIgnoredMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteChar(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setQuoteMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.setTrimmerMatcher(StringMatcher)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.toString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer.tokenize(char[], int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.checkClone(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test1()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test4()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test5()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test6()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test7()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.test8()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasic5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicDelim2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicEmpty2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicIgnoreTrimmed4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted5()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuoted7()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicQuotedTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testBasicTrimmed2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSV(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimple()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCSVSimpleNeedsTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNotSupportedException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testCloneReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_String_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testConstructor_charArray_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimMatcherQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testDelimString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testEmpty(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testGetContent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testIteration()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testListArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testPreviousTokenAndSetEmptyTokenAsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testReset_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStrMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testStringTokenizerStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSV()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTSVEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassInputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testTokenizeSubclassOutputChange()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest.testXSVAbc(StringTokenizer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(char[], int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilder(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.TextStringBuilderReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.mark(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.markSupported()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.read(char[], int, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.ready()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.reset()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.skip(long)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.TextStringBuilderTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.getContent()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.tokenize(char[], int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.TextStringBuilderWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.close()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.flush()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.write(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(CharSequence, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(Object)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(String, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuffer, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(StringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(TextStringBuilder, int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.append(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterable&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(Iterator&lt;?&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendAll(T...)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFalse(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadLeft(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(Object, int, char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendFixedWidthPadRight(int, int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNewLine()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendNull()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendPadding(int, char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendSeparator(char, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTo(Appendable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendTrue(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterable&lt;?&gt;, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Iterator&lt;?&gt;, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendWithSeparators(Object[], String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(String, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuffer, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(StringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(TextStringBuilder, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.appendln(long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.asWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.capacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.charAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.contains(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.delete(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteAll(char)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteCharAt(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteFirst(char)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.deleteImpl(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChar(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.drainChars(int, int, char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.endsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacity(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.ensureCapacityInternal(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equals(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.equalsIgnoreCase(TextStringBuilder)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getChars(int, int, char[], int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.getNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.hashCode()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(String, int)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(StringMatcher, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.indexOf(char, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, Object)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, char[], int, int)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, float)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.insert(int, long)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.isReallocated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(String, int)" value="11.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(StringMatcher, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.lastIndexOf(char, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.leftString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.length()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.midString(int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.minimizeCapacity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Readable)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.readFrom(Reader, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reallocate(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(StringMatcher, String, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replace(int, int, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceAll(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(String, String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(StringMatcher, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceFirst(char, char)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(StringMatcher, String, int, int, int)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.replaceImpl(int, int, int, String, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.resizeBuffer(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.reverse()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.rightString(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.set(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setCharAt(int, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setLength(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNewLineText(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.setNullText(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.startsWith(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.subSequence(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.substring(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toCharArray(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.toStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.trim()" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateIndex(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.validateRange(int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.wrap(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendAll_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendFixedWidthPadRight_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendNewLine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendPadding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendSeparator_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Array()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Collection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendWithSeparators_Iterator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppend_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Boolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_CharArray_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_FormattedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_Object()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_PrimitiveNumber()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuffer_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_StringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_String_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testAppendln_TextStringBuilder_int_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsert()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testInsertWithNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest.testLang299()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.MockReadable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable.read(CharBuffer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.fill(TextStringBuilder, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferException()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharBufferNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendStringBuilderNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToAppendable()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToCharBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendToWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAppendln()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsReader()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsSupplier()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsTokenizer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testAsWriter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCapacityAndLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testChaining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testClear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorCharSequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructorString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testConstructors()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testContains_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteAll_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteCharAtWithNegative()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteFirst_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDeleteIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testDrainCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEndsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEnsureCapacityOutOfMemoryError()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testEqualsIgnoreCase()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetCharsIntIntCharArrayInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNewLineText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testGetSetNullText()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOfLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testIsNotEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang294()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang295()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Left()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLang412Right()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_StringMatcher_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_String_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLastIndexOf_char_int()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLeftString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMidString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testMinimizeCapacity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError2()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testOutOfMemoryError3()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBuffer()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromCharBufferAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadable()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReadableAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReader()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderAppendsToEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderInt()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReadFromReaderIntEmpty()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceAll_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_StringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_String_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplaceFirst_char_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryEndIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_StringMatcher_String_int_int_int_VaryStartIndex()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReplace_int_int_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testReverse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testRightString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetCharAt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSetLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testStartsWith()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubSequenceIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testSubstringIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToCharArrayIntInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuffer()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testToStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testTrim()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Empty_0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.testWrap_CharArray_Int_Exceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.test_LANG_1131_EqualsWithNullTextStringBuilder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.WordUtils()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.abbreviate(String, int, int, String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalize(String, char...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.capitalizeFully(String, char...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.containsAllWords(CharSequence, CharSequence...)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.initials(String, char...)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(char, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.isDelimiter(int, char[])" value="4.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.swapCase(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.uncapitalize(String, char...)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils.wrap(String, int, String, boolean, String)" value="22.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerThanMinusOneValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForLowerValueAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForNullAndEmptyString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimit()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateForUpperLimitAndAppendedString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testAbbreviateUpperLessThanLowerValues()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeFully_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testCapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWordsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testContainsAllWords_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitialsSurrogatePairs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testInitials_String_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG1292()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testLANG673()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testSwapCase_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testText123()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUnCapitalize_Text88()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalizeWithDelimiters_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testUncapitalize_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtMiddleTwice()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapAtStartAndEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithMultipleRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrapWithRegexMatchOfLength0()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBoolean()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest.testWrap_StringIntStringBooleanString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.DeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.EditCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand.getObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.EditScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(DeleteCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(InsertCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.append(KeepCommand&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getLCSLength()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.getModifications()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript.visit(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.InsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.KeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand.accept(CommandVisitor&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.ReplacementsFinder(ReplacementsHandler&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder.visitKeepCommand(T)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.SimpleHandler()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getSkipped()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.getTo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler.handleReplacement(int, List&lt;Character&gt;, List&lt;Character&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.testReplacementsHandler(String, String, int, Character[], Character[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.Snake(int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getDiag()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getEnd()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake.getStart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.StringsComparator(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildScript(int, int, int, int, EditScript&lt;Character&gt;)" value="13.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.buildSnake(int, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getMiddleSnake(int, int, int, int)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.getScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.ExecutionVisitor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.getString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitDeleteCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitInsertCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor.visitKeepCommand(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.tearDown()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testExecution()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLength()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.testLongestCommonSubsequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.createReader(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplace(StringSubstitutor, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestNoReplaceInSteps(String, StringSubstitutor)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplace(StringSubstitutor, String, String, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArrayAtSteps(StringSubstitutor, String, String, boolean, int, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharArraySteps(StringSubstitutor, String, String, boolean, int)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.doTestReplaceInCharSteps(StringSubstitutor, String, String, boolean)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.getMinExpressionLength(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.replace(StringSubstitutor, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengths1ToVarLenPlusNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.testReadMixedBufferLengthsVarLenPlusToNoReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toReader(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest.toStringChar(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.StringSubstitutorReader(Reader, StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.buffer(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.bufferOrDrainOnEos(int, char[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drain(char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.drainOnEos(int, char[], int, int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isBufferMatchAt(StringMatcher, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.isDraining()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.read(char[], int, int)" value="30.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader.readCount(int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.getInput()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.baseline(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.bigDecimal(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.decimalFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatEngineering(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlain(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatPlainGrouped(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleFormatScientific(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.doubleToString(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDouble(int, int, UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.randomDoubleArray(int, int, int, UniformRandomProvider)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.runDoubleFunction(DoubleInput, Blackhole, DoubleFunction&lt;T&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.stringFormat(DoubleInput, Blackhole)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData.setup()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCS(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLen(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.testLCSLenBaseline(InputData)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.AbstractPathFencedLookup(Path...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup.getPath(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfter(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.substringAfterLast(String, char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String, String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterChar()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.testForwarding_substringAfterString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.BiFunctionStringLookup(BiFunction&lt;String, P, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.lookup(String, P)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction&lt;String, U, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map&lt;String, T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testBiFunctionForNestedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testNullBiFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookup.lookup(String, U)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest.testDefaultMethod()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.fetchClass(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup.resolveField(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullClassFetch()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testNullValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.afterEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.beforeEach()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupCache()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupConstant()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupInvalidSyntax()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonExisting()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNonString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupPrivate()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.testLookupUnknownClass()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest.variable(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.DateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.formatDate(long, String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testBadFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.DefaultStringLookup(String, StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup.getStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testEnumValues()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest.testIndividualEnums()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.DnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup.lookup(String)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testAddressFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testCanonicalNameFromHostName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testName()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testOne()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.FileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.readDocumentFixtureString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceBadDocumentPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceMissingFilePart()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testDefaultInstanceToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(String, FileStringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceBadDirPlusGoodOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceCurrentDirPlusOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceEmptyOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testFenceNullOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.FunctionStringLookup(Function&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.on(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testConcurrentHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testHashMapNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testNullFunction()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.IllegalArgumentExceptions()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions.format(Throwable, String, Object...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys.InetAddressKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.InterpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.getStringLookupMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.afterAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.assertLookupNotEmpty(StringLookup, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.beforeAll()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.check(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupKeys()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testLookupWithNullDefaultInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.JavaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getHardware()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getOperatingSystem()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getRuntime()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getSystemProperty(String, String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.getVirtualMachine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.lookup(String)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testMain()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest.testVm()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.LocalHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup.lookup(String)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testAddress()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testCanonicalName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.PropertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.lookup(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFence(StringSubstitutor)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testFenceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorNestedColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplace()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorReplaceProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testInterpolatorWithParameterizedKey2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFile()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingFileWithKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testMissingKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.ResourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getBundle(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.getString(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.lookup(String)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testAny()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadKey()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testBadNames()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testDoubleBundle()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testMissingKeyInSpec()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.ScriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadEngineName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testBadScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNoScript()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testSanityCheck()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptMissingColon()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testScriptUsingMultipleColons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder.setFences(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.DefaultStringLookupsHolder(Properties)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup, Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.getDefaultStringLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.StringLookupFactory(Path[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.addDefaultStringLookups(Map&lt;String, StringLookup&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64DecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64EncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.base64StringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.biFunctionStringLookup(BiFunction&lt;String, U, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.clear()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.constantStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dateStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.dnsStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.environmentVariableStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.fileStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.functionStringLookup(Function&lt;String, R&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, StringLookup&gt;, StringLookup, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.interpolatorStringLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.javaPlatformStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.localHostStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.mapStringLookup(Map&lt;String, V&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.nullStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.propertiesStringLookup(Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.resourceBundleStringLookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.scriptStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.systemPropertyStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toKey(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.toMap(Map&lt;K, V&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.urlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.xmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertDefaultKeys(Map&lt;String, StringLookup&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.assertMappedLookups(Map&lt;String, StringLookup&gt;, String...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.checkDefaultStringLookupsHolder(Properties, String...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.main(String[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testAddDefaultStringLookupsNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_allLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_givenSingleLookup_weirdString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_invalidLookupsDefinition()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_lookupsPropertyNotPresent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testDefaultStringLookupsHolder_multipleLookups()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testSingletons()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest.testXmlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest.testUserName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.UrlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.decode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testAllPercent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testExclamation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.UrlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.encode(String, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup.lookup(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.test()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testExceptionGettingString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.UrlStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadCharsetName()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadEncoding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testBadUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testFileScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testHttpScheme()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testMissingUrl()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.XmlDecoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.XmlEncoderStringLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup.lookup(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testDecode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.XmlStringLookup(Map&lt;String, Boolean&gt;, Path...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup.lookup(String)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.assertLookup(StringLookup)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testBadXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testMissingXPath()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeatures()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNoFeaturesDefault()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.createStringSubstitutor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedFiles()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest.testFencedProperties()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AbstractStringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.AndStringMatcher(StringMatcher...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.size()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.CharArrayMatcher(char...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(CharSequence, int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.isMatch(char[], int, int, int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.CharMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.CharSetMatcher(char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.NoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.TrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(CharSequence, int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.isMatch(char[], int, int, int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.andThen(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.isMatch(char[], int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcher.size()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.StringMatcherFactory()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.andMatcher(StringMatcher...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charMatcher(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.charSetMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.stringMatcher(char...)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory.trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults.isMatch(char[], int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.testDefaultMethods()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_andMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_charSetMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_commaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_doubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_noneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_quoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_singleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_spaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_splitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_stringMatcherChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_tabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.test_trimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testStringMatcher_String_fromString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.checkAndMatcher_char(StringMatcher)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testAndMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharMatcher_char()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCharSetMatcher_charArray()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testCommaMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testDoubleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testMatcherIndices()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testNoneMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSingleQuoteMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSpaceMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testSplitMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testStringMatcher_String()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTabMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest.testTrimMatcher()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetPrefix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetSuffix()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest.testGetSetValueDelimiter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.AbstractDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.apply(double)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.applyFinite(double)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.Builder(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.allowSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.alwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.build()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.decimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.digits(String)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.exponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.formatSymbols(DecimalFormatSymbols)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.get()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.groupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.includeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.infinity(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.maxPrecision(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.minusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.nan(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMaxDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder.plainFormatMinDecimalExponent(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.DoubleFormat(Function&lt;Builder, DoubleFunction&lt;String&gt;&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.EngineeringDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.MixedDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.PlainDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.ScientificDoubleFormat(Builder)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.applyFiniteInternal(ParsedDecimal)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.builder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.assertLocalizedFormatsAreEqual(double, DecimalFormat, DoubleFunction&lt;String&gt;, Locale)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkDefaultFormatSpecial(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormat(DoubleFunction&lt;String&gt;, double, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracy(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkFormatAccuracyWithDefaults(DoubleFormat)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormat(Locale, String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.checkLocalizedFormats(String, Function&lt;Locale, DoubleFunction&lt;String&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.randomDouble(int, int, Random)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testBuilder_illegalArgs()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testCustomDigitString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testEngineering_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testFormatAccuracy()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMaximumPrecision(DoubleFunction&lt;String&gt;, double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaults(DoubleFunction&lt;String&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testMixed_defaultsDeprecated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testPlain_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_custom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.testScientific_localeFormatComparison()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest.trimFormatChars(String)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.ParsedDecimal(boolean, int[], int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.append(char[])" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendFraction(int, int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendLocalizedDigit(int, char[])" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWhole(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.appendWholeGrouped(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.from(double)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getDigitStringSize(int, FormatOptions)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getPlainStringSize(int, FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.getScientificExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.isZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.maxPrecision(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.outputString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[], int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.prepareOutput(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.requiresGroupingSeparatorAfterPosition(int)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.round(int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.roundUp(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.setSingleDigitValue(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeExponent(int, FormatOptions)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldIncludeMinus(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.shouldRoundUp(int)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toEngineeringString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toPlainString(FormatOptions)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.toScientificString(int, FormatOptions)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal.truncate(int)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDecimalSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getExponentSeparatorChars()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getGroupingSeparator()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.getMinusSign()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isAlwaysIncludeExponent()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isGroupThousands()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isIncludeFractionPlaceholder()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.isSignedZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setAlwaysIncludeExponent(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDecimalSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setDigitsFromString(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setExponentSeparator(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setGroupThousands(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setIncludeFractionPlaceholder(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setMinusSign(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setSignedZero(boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl.setThousandsGroupingSeparator(char)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertMaxPrecision(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertRound(double, int, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertSimpleDecimal(ParsedDecimal, boolean, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.assertThrowsWithMessage(Executable, Class&lt;? extends Throwable&gt;, String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkFrom(double, String, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToEngineeringString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToPlainString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToScientificString(double, String, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.checkToStringMethod(double, String, BiFunction&lt;ParsedDecimal, FormatOptions, String&gt;, FormatOptions)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.createRandomDouble(UniformRandomProvider)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.digitString(ParsedDecimal)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.parseExponent(String, FormatOptions)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFrom()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testFromNotFinite()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_carry()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_halfEvenRounding()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testMaxPrecision_singleDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_mixed()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_nine()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testRound_one()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_random()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethodAccuracy_sequence()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testStringMethods_customDigits()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToEngineeringString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_altFormat()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToPlainString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_altFormats()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.testToScientificString_defaults()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance.apply(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.roundValue(Double)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest.testCosineDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.cosineSimilarity(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.dot(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;, Set&lt;CharSequence&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity.getIntersection(Map&lt;CharSequence, Integer&gt;, Map&lt;CharSequence, Integer&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityReturningDoubleWhereByteValueIsZero()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNonEmptyMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest.testCosineSimilarityWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.Counter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter.of(CharSequence[])" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.EditDistanceFrom(EditDistance&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getEditDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.FuzzyScore(Locale)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.fuzzyScore(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore.getLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_NullStringLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetFuzzyScore_StringNullLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testGetLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest.testMissingLocale()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullLeftValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest.testHammingDistance_nullRightValue()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.IntersectionResult(int, int, int)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.equals(Object)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.getSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testEquals()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testHashCode()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithIntersectionAboveSizeAorB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeIntersection()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeA()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithNegativeSizeB()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testNewIntersectionResult_WithZeros()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testProperties()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest.testToString()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.BagCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.IntersectionSimilarity(Function&lt;CharSequence, Collection&lt;T&gt;&gt;)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.TinyBag(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.add(T)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.entrySet()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.getCount(Object)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.uniqueElementSize()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.apply(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set&lt;T&gt;, Set&lt;T&gt;)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(TinyBag, TinyBag)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.toBag(Collection&lt;T&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.assertIntersection(IntersectionSimilarity&lt;T&gt;, CharSequence, CharSequence, int, int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testConstructorWithNullConverterThrows()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testF1ScoreUsingListWordBigrams()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetBigrams()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.testIntersectionUsingSetCharacterListCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramList(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toBigramSet(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterList(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toCharacterSet(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest.toF1ScorePercent(IntersectionResult)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest.testGettingJaccardDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity.calculateJaccardSimilarity(CharSequence, CharSequence)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarity()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest.testGettingJaccardSimilarityStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest.testGetJaroWinklerDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence, CharSequence)" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.setUp()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.testGetJaroWinklerSimilarity_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest.wrap(String)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.LevenshteinDetailedDistance(Integer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence, CharSequence, int[][], boolean)" value="27.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence, CharSequence, int)" value="19.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence, CharSequence)" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testApplyWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testCreatesLevenshteinDetailedDistanceTakingInteger6()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testEquals()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetDefaultInstanceTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetLevenshteinDetailedDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testGetThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testHashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest.testToString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.LevenshteinDistance(Integer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.apply(CharSequence, CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.getThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence, CharSequence, int)" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence, CharSequence)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDistanceTakingInteger()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testConstructorWithNegativeThreshold()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_NullStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringNullInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetLevenshteinDistance_StringStringInt()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest.testGetThresholdDirectlyAfterObjectInstantiation()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.LevenshteinResults(Integer, Integer, Integer, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.equals(Object)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDeleteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getInsertCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.getSubstituteCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.hashCode()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults.toString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsDifferenceInSubstitutionCount()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsReturningFalse()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsSameObject()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest.testEqualsWithNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence, CharSequence)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence, CharSequence)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.apply(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.logestCommonSubsequence(CharSequence, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubsequence(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.longestCommonSubstringLengthArray(CharSequence, CharSequence)" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance.apply(CharSequence, CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistance()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest.testGettingLongestCommonSubsequenceDistanceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.setup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLogestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceApplyStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceNullString()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testGettingLongestCommonSubsequenceStringNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLogestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest.testLongestCommonSubsequenceApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest.test(EditDistance&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.parameters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest.test(Integer, CharSequence, CharSequence, Integer)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.parameters()" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest.test(SimilarityScore&lt;R&gt;, CharSequence, CharSequence, R)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer.apply(CharSequence)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.SimilarityScoreFrom(SimilarityScore&lt;R&gt;, CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.apply(CharSequence)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getLeft()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom.getSimilarityScore()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testApply()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest.testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testEquivalence()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testJavadocExample()" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest.testMissingMetric()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.AggregateTranslator(CharSequenceTranslator...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator.translate(CharSequence, int, Writer)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest.testNullVarargConstructor()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.hex(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence)" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.translate(CharSequence, Writer)" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator.with(CharSequenceTranslator...)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest.testAboveReturningNonNull()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper.translateWhole(CharSequence, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvTranslators()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.translateWhole(CharSequence, Writer)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCRTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperCommaTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperLFTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvEscaperQuoteTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperPlaneTextTest()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest1()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest2()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest3()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest.testCsvUnEscaperTest4()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays.invert(Map&lt;CharSequence, CharSequence&gt;)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testConstructorExists()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testEscapeVsUnescapeMaps(Map&lt;CharSequence, CharSequence&gt;, Map&lt;CharSequence, CharSequence&gt;)" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesAposMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesBasicMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicateDeclaredMapValuesJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testForDuplicatedDeclaredMapKeys()" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testHtml40ExtendedMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testISO8859Map()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest.testJavaCtrlCharsMap()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest.testToUtf16Escape()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.LookupTranslator(Map&lt;CharSequence, CharSequence&gt;)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator.translate(CharSequence, int, Writer)" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testBasicLookup()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testFailsToCreateLookupTranslatorThrowsInvalidParameterException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testLang882()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest.testTranslateSupplementaryCharacter()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest.testSupplementary()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION...)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.isSet(OPTION)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.translate(CharSequence, int, Writer)" value="23.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperOne()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testCreatesNumericEntityUnescaperTwo()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testOutOfBounds()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isOctalDigit(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.isZeroToThree(char)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper.translate(CharSequence, int, Writer)" value="9.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.getClassName()" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator.translate(CharSequence, int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.before()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testCodePointsAreReturned()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testIndexIsValidated()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest.testTranslateThrowsIllegalArgumentException()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.above(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.below(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.between(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int, int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.toUtf16Escape(int)" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper.translate(int, Writer)" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testAbove()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBelow()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest.testBetween()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper.translate(CharSequence, int, Writer)" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testLessThanFour()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUPlus()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest.testUuuuu()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, Writer)" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testInvalidCharacters()" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest.testValidCharacters()" value="1.0"/>
		<VALUE measured="test(int)" value="3.0"/>
		<VALUE measured="toString()" value="1.0"/>
		<VALUE measured="translateWhole(CharSequence, Writer)" value="1.0"/>
	</METRIC>
	<METRIC category="Class" name="Average operation complexity" abbreviation="OCavg">
		<VALUE measured="org.apache.commons.text.AlphabetConverter" value="3.142857142857143"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest" value="1.1363636363636365"/>
		<VALUE measured="org.apache.commons.text.CaseUtils" value="3.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicates" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat" value="3.3333333333333335"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest" value="1.3461538461538463"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils" value="1.8333333333333333"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator" value="2.8333333333333335"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest" value="1.92"/>
		<VALUE measured="org.apache.commons.text.StrBuilder" value="2.4503311258278146"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader" value="1.7777777777777777"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest" value="1.05"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup" value="1.5"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher" value="1.5"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher" value="1.5"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher" value="1.5"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor" value="1.7719298245614035"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest" value="1.1636363636363636"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer" value="1.59375"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest" value="1.1304347826086956"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest" value="1.275"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor" value="1.7096774193548387"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest" value="1.1162790697674418"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest" value="1.125"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer" value="1.59375"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest" value="1.1304347826086956"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder" value="2.2840236686390534"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader" value="1.7777777777777777"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest" value="1.0731707317073171"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils" value="4.055555555555555"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder" value="1.25"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator" value="4.8"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest" value="1.6"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest" value="2.4285714285714284"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader" value="3.9"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance" value="1.1333333333333333"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence" value="4.333333333333333"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup" value="2.5"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup" value="1.1666666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup" value="2.25"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest" value="1.5"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest" value="1.2857142857142858"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup" value="1.2"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup" value="1.8571428571428572"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup" value="1.9"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup" value="3.5"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup" value="1.8333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup" value="2.5"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory" value="1.125"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder" value="1.8"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest" value="1.1333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup" value="2.5"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup" value="2.5"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher" value="2.2"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher" value="1.4"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher" value="1.4"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher" value="1.5"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory" value="1.5625"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat" value="1.3333333333333333"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder" value="1.1"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat" value="1.5"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest" value="1.2142857142857142"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal" value="2.6666666666666665"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest" value="1.21875"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity" value="2.6666666666666665"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult" value="1.7142857142857142"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity" value="2.8"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest" value="1.5625"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity" value="3.5"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance" value="1.5"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance" value="4.714285714285714"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults" value="1.25"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence" value="3.857142857142857"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest" value="1.6666666666666667"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator" value="2.5"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator" value="2.75"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest" value="1.5384615384615385"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper" value="1.1428571428571428"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper" value="1.5"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest" value="1.0"/>
	</METRIC>
	<METRIC category="Class" name="Maximum operation complexity" abbreviation="OCmax">
		<VALUE measured="org.apache.commons.text.AlphabetConverter" value="10.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils" value="5.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicates" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat" value="15.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils" value="6.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator" value="10.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder" value="4.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result" value="1.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest" value="10.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer" value="9.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder" value="9.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable" value="1.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils" value="19.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator" value="14.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake" value="1.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor" value="1.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader" value="24.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput" value="1.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence" value="6.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal" value="11.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance" value="17.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator" value="7.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest" value="1.0"/>
	</METRIC>
	<METRIC category="Class" name="Weighted method complexity" abbreviation="WMC">
		<VALUE measured="org.apache.commons.text.AlphabetConverter" value="44.0"/>
		<VALUE measured="org.apache.commons.text.AlphabetConverterTest" value="25.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtils" value="9.0"/>
		<VALUE measured="org.apache.commons.text.CaseUtilsTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicates" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CharacterPredicatesTest" value="7.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormat" value="6.0"/>
		<VALUE measured="org.apache.commons.text.CompositeFormatTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormat" value="70.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest" value="35.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.LowerCaseFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OtherExtendedMessageFormat" value="1.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.OverrideShortDateFormatFactory" value="2.0"/>
		<VALUE measured="org.apache.commons.text.ExtendedMessageFormatTest.UpperCaseFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtils" value="11.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest" value="10.0"/>
		<VALUE measured="org.apache.commons.text.FormattableUtilsTest.SimplestFormattable" value="2.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator" value="17.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGenerator.Builder" value="14.0"/>
		<VALUE measured="org.apache.commons.text.RandomStringGeneratorTest" value="48.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder" value="370.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderReader" value="16.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderTokenizer" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilder.StrBuilderWriter" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderAppendInsertTest" value="74.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest" value="105.0"/>
		<VALUE measured="org.apache.commons.text.StrBuilderTest.MockReadable" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.MapStrLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.ResourceBundleLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StrLookup.SystemPropertiesStrLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrLookupTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher" value="20.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.CharSetMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.NoMatcher" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.StringMatcher" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcher.TrimMatcher" value="3.0"/>
		<VALUE measured="org.apache.commons.text.StrMatcherTest" value="17.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutor" value="101.0"/>
		<VALUE measured="org.apache.commons.text.StrSubstitutorTest" value="64.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizer" value="102.0"/>
		<VALUE measured="org.apache.commons.text.StrTokenizerTest" value="78.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils" value="19.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.Builder" value="4.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtils.XsiUnescaper" value="6.0"/>
		<VALUE measured="org.apache.commons.text.StringEscapeUtilsTest" value="51.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor" value="106.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutor.Result" value="2.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorTest" value="96.0"/>
		<VALUE measured="org.apache.commons.text.StringSubstitutorWithInterpolatorStringLookupTest" value="27.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizer" value="102.0"/>
		<VALUE measured="org.apache.commons.text.StringTokenizerTest" value="78.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder" value="386.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderReader" value="16.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer" value="5.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter" value="8.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderAppendInsertTest" value="52.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest" value="132.0"/>
		<VALUE measured="org.apache.commons.text.TextStringBuilderTest.MockReadable" value="2.0"/>
		<VALUE measured="org.apache.commons.text.WordUtils" value="73.0"/>
		<VALUE measured="org.apache.commons.text.WordUtilsTest" value="32.0"/>
		<VALUE measured="org.apache.commons.text.diff.DeleteCommand" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditCommand" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.EditScript" value="7.0"/>
		<VALUE measured="org.apache.commons.text.diff.InsertCommand" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.KeepCommand" value="2.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinder" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.diff.ReplacementsFinderTest.SimpleHandler" value="5.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator" value="24.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparator.Snake" value="4.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.diff.StringsComparatorTest.ExecutionVisitor" value="5.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorFilterReaderTest" value="34.0"/>
		<VALUE measured="org.apache.commons.text.io.StringSubstitutorReader" value="39.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance" value="17.0"/>
		<VALUE measured="org.apache.commons.text.jmh.DoubleFormatPerformance.DoubleInput" value="2.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance" value="8.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.BaselineLongestCommonSubsequence" value="13.0"/>
		<VALUE measured="org.apache.commons.text.jmh.LongestCommonSubsequencePerformance.InputData" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractPathFencedLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.AbstractStringLookupTest.TestStringLookup" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64DecoderStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.Base64EncoderStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiFunctionStringLookupTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.BiStringLookupTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookup" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupBasicTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ConstantStringLookupTest" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DateStringLookupTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookup" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DefaultStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookup" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.DnsStringLookupTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.EnvironmentVariableStringLookupTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FileStringLookupTest" value="16.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookup" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.FunctionStringLookupTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.IllegalArgumentExceptions" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InetAddressKeys" value="1.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookup" value="13.0"/>
		<VALUE measured="org.apache.commons.text.lookup.InterpolatorStringLookupTest" value="10.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookup" value="19.0"/>
		<VALUE measured="org.apache.commons.text.lookup.JavaPlatformStringLookupTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookup" value="7.0"/>
		<VALUE measured="org.apache.commons.text.lookup.LocalHostStringLookupTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.NullStringLookupTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.PropertiesStringLookupTest" value="14.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookup" value="11.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ResourceBundleStringLookupTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptEngineFactoryHelper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.ScriptStringLookupTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory" value="45.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.Builder" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder" value="9.0"/>
		<VALUE measured="org.apache.commons.text.lookup.StringLookupFactoryTest" value="17.0"/>
		<VALUE measured="org.apache.commons.text.lookup.SystemPropertyStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlDecoderStringLookupTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookup" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlEncoderStringLookupTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.UrlStringLookupTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlDecoderStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookup" value="2.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlEncoderStringLookupTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookup" value="5.0"/>
		<VALUE measured="org.apache.commons.text.lookup.XmlStringLookupTest" value="8.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external.CustomStringSubstitutorTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher" value="12.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher" value="11.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher" value="7.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher" value="4.0"/>
		<VALUE measured="org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher" value="6.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactory" value="25.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherFactoryTest.StringMatcherDefaults" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharArrayTest" value="18.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringMatcherOnCharSequenceStringTest" value="16.0"/>
		<VALUE measured="org.apache.commons.text.matcher.StringSubstitutorGetSetTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat" value="16.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.Builder" value="22.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat" value="3.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat" value="2.0"/>
		<VALUE measured="org.apache.commons.text.numbers.DoubleFormatTest" value="34.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimal" value="80.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest" value="39.0"/>
		<VALUE measured="org.apache.commons.text.numbers.ParsedDecimalTest.FormatOptionsImpl" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistance" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineDistanceTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarity" value="8.0"/>
		<VALUE measured="org.apache.commons.text.similarity.CosineSimilarityTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.Counter" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.EditDistanceFrom" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScore" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.FuzzyScoreTest" value="6.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistance" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.HammingDistanceTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResult" value="12.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionResultTest" value="15.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity" value="14.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.BagCount" value="1.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.IntersectionSimilarityTest" value="25.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardDistanceTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarity" value="7.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaccardSimilarityTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistance" value="3.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerDistanceTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarity" value="18.0"/>
		<VALUE measured="org.apache.commons.text.similarity.JaroWinklerSimilarityTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistance" value="48.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDetailedDistanceTest" value="16.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistance" value="33.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinDistanceTest" value="9.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResults" value="10.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LevenshteinResultsTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequence" value="27.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistance" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceDistanceTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.similarity.LongestCommonSubsequenceTest" value="13.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedEditDistanceFromTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedLevenshteinDistanceTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.ParameterizedSimilarityScoreFromTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.RegexTokenizer" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFrom" value="4.0"/>
		<VALUE measured="org.apache.commons.text.similarity.SimilarityScoreFromTest" value="2.0"/>
		<VALUE measured="org.apache.commons.text.similarity.StringMetricFromTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslator" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.AggregateTranslatorTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CharSequenceTranslator" value="11.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslator" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CodePointTranslatorTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvEscaper" value="2.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslators.CsvUnescaper" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.CsvTranslatorsTest" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArrays" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.EntityArraysTest" value="20.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaper" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.JavaUnicodeEscaperTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslator" value="10.0"/>
		<VALUE measured="org.apache.commons.text.translate.LookupTranslatorTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaper" value="8.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityEscaperTest" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper" value="15.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaper.OPTION" value="0.0"/>
		<VALUE measured="org.apache.commons.text.translate.NumericEntityUnescaperTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaper" value="6.0"/>
		<VALUE measured="org.apache.commons.text.translate.OctalUnescaperTest" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslator" value="4.0"/>
		<VALUE measured="org.apache.commons.text.translate.SinglePassTranslatorTest" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaper" value="12.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeEscaperTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaper" value="5.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnescaperTest" value="3.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover" value="1.0"/>
		<VALUE measured="org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemoverTest" value="2.0"/>
	</METRIC>
	<METRIC category="Package" name="Average cyclomatic complexity" abbreviation="v(G)avg">
		<VALUE measured="org.apache.commons.text" value="1.7032828282828283"/>
		<VALUE measured="org.apache.commons.text.diff" value="2.0"/>
		<VALUE measured="org.apache.commons.text.io" value="3.2916666666666665"/>
		<VALUE measured="org.apache.commons.text.jmh" value="1.84"/>
		<VALUE measured="org.apache.commons.text.lookup" value="1.2941176470588236"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="1.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="1.2815533980582525"/>
		<VALUE measured="org.apache.commons.text.numbers" value="1.56"/>
		<VALUE measured="org.apache.commons.text.similarity" value="2.0913705583756346"/>
		<VALUE measured="org.apache.commons.text.translate" value="1.8333333333333333"/>
	</METRIC>
	<METRIC category="Package" name="Total cyclomatic complexity" abbreviation="v(G)tot">
		<VALUE measured="org.apache.commons.text" value="2698.0"/>
		<VALUE measured="org.apache.commons.text.diff" value="92.0"/>
		<VALUE measured="org.apache.commons.text.io" value="79.0"/>
		<VALUE measured="org.apache.commons.text.jmh" value="46.0"/>
		<VALUE measured="org.apache.commons.text.lookup" value="396.0"/>
		<VALUE measured="org.apache.commons.text.lookup.external" value="3.0"/>
		<VALUE measured="org.apache.commons.text.matcher" value="132.0"/>
		<VALUE measured="org.apache.commons.text.numbers" value="234.0"/>
		<VALUE measured="org.apache.commons.text.similarity" value="412.0"/>
		<VALUE measured="org.apache.commons.text.translate" value="187.0"/>
	</METRIC>
	<METRIC category="Module" name="Average cyclomatic complexity" abbreviation="v(G)avg">
		<VALUE measured="commons-text" value="1.6846456692913385"/>
	</METRIC>
	<METRIC category="Module" name="Total cyclomatic complexity" abbreviation="v(G)tot">
		<VALUE measured="commons-text" value="4279.0"/>
	</METRIC>
	<METRIC category="Project" name="Average cyclomatic complexity" abbreviation="v(G)avg">
		<VALUE measured="project" value="1.6846456692913385"/>
	</METRIC>
	<METRIC category="Project" name="Total cyclomatic complexity" abbreviation="v(G)tot">
		<VALUE measured="project" value="4279.0"/>
	</METRIC>
</METRICS>
